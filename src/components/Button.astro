---
const {
    href = "",
    label = "詳しく見る",
    color = "white",
    width = "medium",
    target = "_self",
    size = "medium",
    iconSrc,
} = Astro.props;
---
<a class={`container container--color-${color} container--size-${size} container--width-${width}`} href={href} target={target}>
    <span class={`label`}>
        {iconSrc &&
            <span class="icon"><span style={`-webkit-mask-image:url(${iconSrc}); mask-image:url(${iconSrc});`}></span></span>
        }
        {label}
    </span>
    <span class="arrow">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect class="delay-3" x="4" y="15.5" width="3" height="3" transform="rotate(-90 4 15.5)" fill="#F7701B"/>
            <rect class="delay-2" x="7" y="12.5" width="3" height="3" transform="rotate(-90 7 12.5)" fill="#F7701B"/>
            <rect class="delay-1" x="10" y="9.5" width="3" height="3" transform="rotate(-90 10 9.5)" fill="#F7701B"/>
            <rect class="delay-2" x="7" y="6.5" width="3" height="3" transform="rotate(-90 7 6.5)" fill="#F7701B"/>
            <rect class="delay-3" x="4" y="3.5" width="3" height="3" transform="rotate(-90 4 3.5)" fill="#F7701B"/>
        </svg>
    </span>
</a>
<style>
    .container {
        position: relative;
        z-index: 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        height: 68px;
        padding: 0 20px;
        font-size: 18px;
        color: var(--color-black-primary);
        background: linear-gradient(var(--color-orange-secondary),var(--color-orange-primary));
        border-radius: 16px;
        box-shadow: var(--shadow-primary-medium);
        overflow: hidden;
        transition: transform 0.25s cubic-bezier(.35,.12,.14,1.5),box-shadow 0.5s;
    }
    .container--color-orange::before {
        content: "";
        position: absolute;
        inset: 0;
        z-index: 2;
        border-radius: 16px;
        background: radial-gradient(circle at center top,#444,#000 100%);
        mix-blend-mode: color-dodge;
        opacity: 0;
        transition: opacity 0.25s;
    }
    .container--color-white::before {
        content: "";
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
        width: calc(100% - 6px);
        height: calc(100% - 6px);
        background: var(--color-white-primary);
        border-radius: 13px;
        z-index: -1;
    }
    .container--width-medium {
        max-width: 100%;
        max-width: 280px;
    }
    .icon {
        width: 24px;
        height: 24px;
        filter: drop-shadow(var(--filter-shadow-primary-tiny));
    }
    .icon>span {
        display: block;
        width: 100%;
        height: 100%;
        background: var(--color-white-primary);
        -webkit-mask: center/contain no-repeat;
        mask: center/contain no-repeat;
    }
    :where(.container--color-white) .icon {
        filter: none;
    }
    :where(.container--color-white) .icon span {
        background: var(--color-black-primary);
    }
    .label {
        display: flex;
        align-items: center;
        gap: 4px;
        margin: 0 auto;
    }
    .container--color-orange {
        color: var(--color-white-primary);
        text-shadow: var(--text-shadow-primary);
        background: linear-gradient(-60deg,var(--color-orange-primary),var(--color-orange-secondary));
        border: 1px solid rgba(255,255,255,0.5);
    }
    .arrow {
        position: relative;
        padding: 8px;
        border-radius: 8px;
        background: var(--color-pink-secondary);
    }
    .arrow svg {
        content: "";
        display: block;
        width: 16px;
        height: 16px;
    }
    .container:hover {
        transform: scale(1.05);
    }
    .container:hover .arrow {
        transform: translate(3px,0);
    }
    .container:hover .arrow rect {
        animation: arrow-dot-show 0.5s 0s normal both 1 ease-out;
    }
    .container:hover .arrow .delay-1 {
        animation-delay: 0s;
    }
    .container:hover .arrow .delay-2 {
        animation-delay: 0.0625s;
    }
    .container:hover .arrow .delay-3 {
        animation-delay: 0.125s;
    }
    .container--color-orange:hover::before {
        opacity: 1;
    }
    .container--color-orange:hover::after {
        opacity: 1;
    }
    :where(.container[target="_blank"]) .label::after {
        content: "";
        display: inline-block;
        vertical-align: middle;
        width: 24px;
        height: 24px;
        background: var(--color-black-primary);
        -webkit-mask: url("/images/icon-external-link.svg") center/contain no-repeat;
        mask: url("/images/icon-external-link.svg") center/contain no-repeat;
    }
    .container--size-large {
        height: 112px;
        color: var(--color-orange-tertiary);
        font-size: 24px;
        border-radius: 24px;
    }

    .container--size-large::before {
        border-radius: 21px;
    }
    .container--size-large .label {
        gap: 16px;
    }
    .container--size-large .icon {
        width: 32px;
        height: 32px;
    }
    .container--size-large .icon>span {
        background-color: var(--color-orange-tertiary);
    }
    /* :where(.container--color-white) .arrow {
        background: var(--color-orange-primary);
    }
    :where(.container--color-white) .arrow::before {
        background: var(--color-white-primary);
    } */
</style>